/*
File: style.css
GUI Assignment 3: Creating an interactive dynamic multiplication table
Tim Truong, UMass Lowell Computer Science, tim_truong1@student.uml.edu
Copyright (c) 2022 by Tim Truong. All rights reserved. May be freely copied or
excerpted for educational purposes with credit to the author.
Updated on 6/15/22 at 10:00pm.
Instructor: Professor Wenjin Zhou
Sources of Help: W3Schools and Stackoverflow
Brief Overview: The site I created for hw 3 for GUI 1 is pretty much a multiplication table where
it takes in about four numbers from the user where each number that is required to be inputted be
the minimum and maximum value of the first row and column. So for instance, if the user inputs 5 and 9 for
the min and max number for row and 4 and 7 for column then it would generate a table that has 5 rows
and 4 columns where the starting row and column would have the minimum value inputted and at the last row
and column would have the max value inputted and each corresponding cell based on the row and column
would have the product of the value at that row and column. So for example at the row where its value is
at 6 and the column at 7, the cell corresponding to those positions would produce 42 as 6 * 7 = 42.
*/

* {
    box-sizing: border-box;
}

body {
    height: 100%;
    width: 100%;
    background-color: mintcream;
    overflow: hidden;
}

/* Added text-shadow becaused it looked nice */
/* Dark blue and light blue text shadow */
h2, h3 {
    text-shadow: 0 0 5px #7ac7f7, 0 0 7px rgb(97, 63, 245);
}

.input-container {
    background-color:rgb(199, 247, 247);
    border: 1px solid grey;
    width: 300px;
    height: 180px;
    padding-top: 10px;
}

.input-container form {
    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    text-align: center;
    margin: 0 10px;
}

p {
    margin: 0;
    font-weight: 800;
    border-bottom: 1px solid black;
}

/* Added padding to make format look nice and organized */
.input-container form label {
    display: inline-block;
    padding: 5px 0px;
    width: 180px
}

/* Added position relative to make these labels uniform with the other labels */
#min-rlabel, #max-rlabel {
    position: relative;
    right: -0.8em;
}

#min-cVal, #max-cVal, #min-rVal, #max-rVal {
    width: 60px;
}

#submit-btn {
    background-color: #42b3fa;
    border: 1px solid lightskyblue;
    border-radius: 10px;
    cursor: pointer;
    margin-top: 5px;
    color: white;
}

/* Added a hover affect to make button look nice when hovering over */
#submit-btn:hover {
    background: linear-gradient(to bottom right, #6899FF, #f794e0);
}

#msg {
    display: inline-block;
    margin: 0 auto;
    background-color: #f8479a;
}

.table-wrapper {
    display: none;
    max-width: 400px;
    max-height: 400px;
    margin-left: 50%;
    margin-top: -200px;
    overflow: scroll;
}

table {
    border-collapse: collapse;
}

/*  Could not figure out how to make first row and column fixed inside scrollable container */
/*  Not until i found this helpful stackoverflow link: Credit ->
    https://stackoverflow.com/questions/15811653/table-with-fixed-header-and-fixed-column-on-pure-css */
/*  Helped me out alot greatly on managing this part of the assignment and part of the code from the source
    is transferred over to this css rule and another one down below with a few changes that I made to make
    the code cleaner and less redudant while showing my understanding. Also in .table wrapper as well
    (almost forgot about that section) */
table tr:nth-child(1) {
    position: sticky; /* Makes top header of table stay in place when scrolling vertically */
    top: 0;
}

table tr th:first-child {
    position: sticky; /* Makes first column of table stay in place when scrolling horizontailly */
    left: 0;
}

/*  Makes the first table row and first table header blank just like the 
    example in the pdf sheet */
table > tr:first-child > th:first-child {
    background-color: mintcream;
    border: none;
}

th, td {
    border: 1px solid black;
    width: 40px;
    text-align: center;
}

/* Made th text bolder and standout from the td */
/* so that way someone can distinguish between the top row and first column */
th {
    background-color: rgb(53, 103, 250);
    color: #fff;
    font-weight: 600;
}

td {
    background-color: rgb(176, 224, 243);
    color: #222;
}

footer {
    position: absolute;
    margin-top: 20px;
    text-align: center;
    text-shadow: 0 0 5px #7ac7f7, 0 0 7px rgb(97, 63, 245);
    font-weight: 600;
}